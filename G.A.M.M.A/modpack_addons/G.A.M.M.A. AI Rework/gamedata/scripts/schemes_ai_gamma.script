local verification_npc = {}
local verification_npc2 = {}
local weapon = nil
local sec = nil


local working_maps = {
    ["k00_marsh"] = 1,
    ["l01_escape"] = 1,
    ["l05_bar"] = 0,
    ["l02_garbage"] = 1,
    ["k01_darkscape"] = 0,
    ["l04_darkvalley"] = 0,
    ["k02_trucks_cemetery"] = 0,
    ["l09_deadcity"] = 0,
    ["l03_agroprom"] = 1,
    ["l06_rostok"] = 0,
    ["l07_military"] = 1,
    ["l08_yantar"] = 1,
    ["jupiter"] = 0,
    ["l03u_agr_underground"] = 0,
    ["l10_limansk"] = 0,
    ["l08u_brainlab"] = 0,
    ["l10_red_forest"] = 1,
    ["labx8"] = 0,
    ["l12_stancia"] = 0,
    ["zaton"] = 0,
    ["l12_stancia_2"] = 0,
    ["l11_hospital"] = 0,
    ["jupiter_underground"] = 0,
    ["l10u_bunker"] = 0,
    ["l10_radar"] = 0,
    ["l04u_labx18"] = 0,
    ["l11_pripyat"] = 1,
    ["l12u_sarcofag"] = 0,
    ["l12u_control_monolith"] = 0,
    ["l13_generators"] = 0,
    ["l13u_warlab"] = 0,
    ["pripyat"] = 1,
    ["y04_pole"] = 0,
}

local trained_f = {
			["killer"] = "merc",
			["dolg"] = "duty",
			["freedom"] = "freedom",
			["army"] = "military",
			}
			
local untrained_f = {
			["stalker"] = "stalker",
			["bandit"] = "bandit",
			["ecolog"] = "ecolog",
			["csky"] = "csky",
			["renegade"] = "renegade",
			}
			
local antagonist_f = {
			["monolith"] = "monolith",
			["greh"] = "sin",
			["isg"] = "unisg",
			}
			
local ranks = {
			["novice"] = "Rookie",
			["trainee"] = "Trainee",
			["experienced"] = "Experienced",
			["professional"] = "Professional",
			["veteran"] = "Veteran",
			["expert"] = "Expert",
			["master"] = "Master",
			["legend"] = "Legend",
			}
			
local function npc_on_hit_callback(npc,amount,local_direction,who,bone_index)
	if (amount > 0) then
		db.storage[npc:id()].hitted_by = who and who:id()
	end
	
	if who:id() == AC_ID then
		verification_npc[npc:id()] = 0
	end
end

function on_game_start()
	RegisterScriptCallback("npc_on_hit_callback",npc_on_hit_callback)
	RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
end

function save_state(m_data)
    m_data.dumb_table = dumb_table
	m_data.table_npc = table_npc
	m_data.swicth_table2 = swicth_table2
end

function load_state(m_data)
    dumb_table = m_data.dumb_table
	table_npc = m_data.table_npc
	swicth_table2 = m_data.swicth_table2
end

local swicth_table2 = {}

local time_table = {}
local time_table2 = {}
local swicth_table = {}

local table_npc = {}
local dumb_table = {}
math.randomseed(os.time())
local rnd = math.random(18000,25000)
local rnd2 = math.random(35000,50000)						 
function trace_this(to_trace1)
    local log_file = io.open("log_memory_npc", "a")
    log_file:write(to_trace1)
    log_file:close(log_file)
end

function dumb_npc(npc, id)

	if IsStalker(id) then
		local rank = ranks.get_obj_rank_name(npc)
		local faction = character_community(npc)	
		local fchance = 5
		local rchance = 5
		local tchance = fchance + rchance
		local rnd3 = math.random(1,tchance)	
	
		
		if faction == "bandit" or "stalker" or"csky" or "ecolog" or "renegade" then 
			if rank == "master" then fchance = 4 return
				elseif rank == "legend" then fchance = 5 return
				else
				fchance = 4 return
			end
		else
			fchance = 5
			return 
		end
		
		if not antagonist_f[faction] then
			if rank == "novice" then rchance = 3 return
			elseif rank == "trainee" then rchance = 3 return
			elseif rank == "experienced" then rchance = 4 return
			elseif rank == "professional" then rchance = 4 return
			else
				rchance = 5
				return
			end
		end
		
		if dumb_table[id] == nil and not antagonist_f[faction] then
			if (rnd3 == 1) then
				dumb_table[id] = 1
			else dumb_table[id] = 2
			end
		end
	end
end

function is_dumb(id, distance, my_memory)

		if dumb_table[id] ~= nil then
			if (dumb_table[id] == 1 and distance >= 250 and my_memory < rnd2) then
				return true
			end
		end
end

function pure_enemy_distance(npc, enemy)
		local st = db.storage[npc:id()]
		local enemy = st and st.enemy_id and (db.storage[st.enemy_id] and db.storage[st.enemy_id].object or level.object_by_id(st.enemy_id))
		local pos1 = npc:position()
		local pos2 = enemy:position()
		local dist = pos1:distance_to_sqr(pos2)
		if (dist > 150) then
			return true
		end
end
	
function scheme_camper(enemy,npc,actor)
	local sim = alife()
	local gg = game_graph()
	local actor_level = sim:level_name(gg:vertex(sim:actor().m_game_vertex_id):level_id())
	if working_maps[actor_level] == 0 then 
		return false
	end
	
	local enemy_id = db.storage[npc:id()].enemy_id
		
	if (enemy_id ~= nil and enemy_id == db.actor:id()) then	
		local enemy2 = enemy_id and level.object_by_id(enemy_id)
		local time_in_memory = time_global()
		local pos1 = npc:position()
		local pos2 = enemy:position()
		local is_actor = (enemy_id == db.actor:id())
		local dist = pos1:distance_to_sqr(pos2)
		time_table[npc:id()] = time_global() - npc:memory_time(enemy)
	
		if pure_enemy_distance(npc,enemy) then
			return false
		end
				
		if (npc:see(enemy)) then
			table_npc[npc:id()] = true
		end
				
		if (table_npc[npc:id()] == true and time_table[npc:id()] >= 100) and swicth_table2[npc:id()] ~= true then 
			swicth_table2[npc:id()] = true
		end
			
		if verification_npc[npc:id()] == nil then
			verification_npc[npc:id()] = 0
		end

		return false
	end
			
	if (npc.health >= 0.3) then 
		if time_table[npc:id()] ~= nil then	
			if dist >= 2000 and dist < 15000 and time_table[npc:id()] < rnd then
				if (swicth_table2[npc:id()] == true and enemy.health > 0.4) then
					return true
				end		 
			end
				
			if dist >= 15000 and time_table[npc:id()] < rnd2 then
				if (swicth_table2[npc:id()] == true and enemy.health > 0.4) then
					return true
				end	
				return false
			end
		end
	end
	
	return false
end


function scheme_cover(enemy,npc,actor)
	local sim = alife()
	local gg = game_graph()
	local actor_level = sim:level_name(gg:vertex(sim:actor().m_game_vertex_id):level_id())
	
	if working_maps[actor_level] == 0 then 
		return false
	end
	
	local enemy_id = db.storage[npc:id()].enemy_id
	
	if (enemy_id ~= nil and enemy_id == db.actor:id()) then
		local pos1 = npc:position()
		local pos2 = enemy:position()
		local dist = pos1:distance_to_sqr(pos2)
		local is_actor = (enemy_id == db.actor:id())
		time_table2[npc:id()] = time_global() - npc:memory_time(enemy)
		
		if is_actor == true then
			else if (enemy_id ~= nil and enemy_id > 0) then 
			end
		end		
			
		if pure_enemy_distance(npc,enemy) then
			return true
		end
				
		if (npc:see(db.actor)) then
			table_npc[npc:id()] = true
		end
			
		if (table_npc[npc:id()] == true and time_table2[npc:id()] >= 100) and swicth_table2[npc:id()] ~= true then 
			swicth_table2[npc:id()] = true
		end
			
		if verification_npc[npc:id()] == nil then
			verification_npc[npc:id()] = 0
		end

		return false
	end		
end

function scheme_mono(enemy,npc,actor)
	local faction = character_community(npc)
	
	if antagonist_f[faction] then
		return true
	else
		return false
	end
end
	
function ranged(weapon)

	local wpn = weapon
	local sec = wpn:section()
	local kind = ini_sys:r_string_ex(sec,"kind") or "unknown"

	local lr = {
		["w_rifle"] = true,
		["w_sniper"] = true,
		["w_launcher"] = true,
	}

	if lr[kind] then
		return true
	else
		return false
	end
end