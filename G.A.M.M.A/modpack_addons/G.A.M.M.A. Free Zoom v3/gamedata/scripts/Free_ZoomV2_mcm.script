local dte = demonized_time_events

-- KEYBINDINGS MANAGEMENT AND MCM --

KEY_TOGGLE_ZOOM = 341 -- Thumb mouse button

local mcm_keybinds = ui_mcm and ui_mcm.key_hold

function on_mcm_load()
	return {
		id = "free_zoom",
		sh = true,
		gr = {
			-- LuaFormatter off
			{id = "title", type = "slide", link = "ui_options_slider_player", text = "ui_mcm_menu_free_zoom", size = {512, 50}, spacing = 20},
			{id = "key_bind_toggle", type = "key_bind", val = 2, def = KEY_TOGGLE_ZOOM},
			{id = "pistol_mult", type = "track", val = 2, min=1,max=2,step=0.01, def = 1.15},
			-- LuaFormatter on
		}
	}
end

function on_option_change(mcm)
	fov_before = get_console_cmd(2, "fov")
	hud_fov_before = get_console_cmd(2, "hud_fov")
	mouse_sens_before = get_console_cmd(2, "mouse_sens")
	if mcm then
		KEY_TOGGLE_ZOOM = ui_mcm.get("free_zoom/key_bind_toggle") or KEY_TOGGLE_ZOOM
		pistol_mult = ui_mcm.get("free_zoom/pistol_mult") or 1.15
	end
end


-- UTILITY --

special_weapons={
	["wpn_desert_eagle"] = 0.58,
	["wpn_desert_eagle_custom"] = 0.58,	
	["wpn_desert_eagle_modern"] = 0.58,
	["wpn_desert_eagle_steppe"] = 0.58,
	["wpn_desert_eagle_nimble"] = 0.58,
	["wpn_ak12_m1"] = 0.78,
	["wpn_sr25"] = 0.80,
}

local pressed = 0
local released = 0
local custom_zoom = false

function reset_fov_to_normal(fov_val)
	exec_console_cmd("fov " .. fov_val)
	return true
end

function reset_hud_fov_to_normal(fov_val)
	exec_console_cmd("hud_fov " .. fov_val)
	return true
end

function reset_mouse_sens_to_normal(fov_val)
	exec_console_cmd("mouse_sens " .. fov_val)
	return true
end

-- CALLBACKS FUNCTIONS --

function actor_on_first_update()
	fov_before = get_console_cmd(2, "fov")
	hud_fov_before = get_console_cmd(2, "hud_fov")
	mouse_sens_before = get_console_cmd(2, "mouse_sens")
	actor_on_update()
	reset_hud_fov_to_normal(hud_fov_before)
end

function actor_on_update()
	if not hud_fov_backup then return end
		
	wpn = db.actor:active_item()
	if wpn then
		sec = wpn:section()
		
		local is_pistol = SYS_GetParam(0, sec, "kind", "") == "w_pistol" 
		if is_pistol then
			hud_fov_before = hud_fov_backup * pistol_mult
		else
			hud_fov_before = hud_fov_backup
		end
		
		if special_weapons[sec] then
			hud_fov_before = special_weapons[sec]
		end
		
		if last_sec and last_sec ~= sec then
			exec_console_cmd("hud_fov " .. hud_fov_before)
		end
		
		last_sec = sec
	end
end

function on_key_press(key)
	if (key == bind_to_dik(key_bindings.kWPN_ZOOM)) then
		if pressed and pressed == 0 then
			dte.CreateTimeEvent("free_zoom_fov", "reset_fov_to_normal", 0.03, reset_fov_to_normal, fov_before)
			dte.CreateTimeEvent("free_zoom_hud_fov", "reset_hud_fov_to_normal", 0.03, reset_hud_fov_to_normal, hud_fov_before)
			dte.CreateTimeEvent("free_zoom_mouse", "reset_mouse_sens_to_normal", 0.03, reset_mouse_sens_to_normal, mouse_sens_before)			
		end
	end
	if not (key == KEY_TOGGLE_ZOOM) then return end
	pressed = 1
	released = 0
	exec_console_cmd("fov " .. fov_before * 0.61)
	exec_console_cmd("hud_fov " .. hud_fov_before * 0.61)
	exec_console_cmd("mouse_sens " .. mouse_sens_before * 0.61)
	custom_zoom = true
	local run_coef = 0.6
	local sprint_coef = 0.95
	speed.add_speed("freezoom_speed_run", run_coef, false, true)
	speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
end

function on_key_release(key)
	if (key == KEY_TOGGLE_ZOOM) then
		if not custom_zoom then return end

		custom_zoom = false
		local run_coef = 1
		local sprint_coef = 1
		speed.add_speed("freezoom_speed_run", run_coef, false, true)
		speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)

		pressed = 0
		released = 1

		dte.CreateTimeEvent("free_zoom_fov", "reset_fov_to_normal", 0.085, reset_fov_to_normal, fov_before)
		dte.CreateTimeEvent("free_zoom_hud_fov", "reset_hud_fov_to_normal", 0.085, reset_hud_fov_to_normal, hud_fov_before)
		dte.CreateTimeEvent("free_zoom_mouse", "reset_mouse_sens_to_normal", 0.085, reset_mouse_sens_to_normal, mouse_sens_before)
	end
	
	if (key == bind_to_dik(key_bindings.kWPN_FIRE)) then
		if released == 1 then
			dte.CreateTimeEvent("free_zoom_fov", "reset_fov_to_normal", 0.085, reset_fov_to_normal, fov_before)
			dte.CreateTimeEvent("free_zoom_hud_fov", "reset_hud_fov_to_normal", 0.085, reset_hud_fov_to_normal, hud_fov_before)
			dte.CreateTimeEvent("free_zoom_mouse", "reset_mouse_sens_to_normal", 0.085, reset_mouse_sens_to_normal, mouse_sens_before)
			local run_coef = 1
			local sprint_coef = 1
			speed.add_speed("freezoom_speed_run", run_coef, false, true)
			speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
		end
	end
end

function actor_on_before_death()
	local run_coef = 1
	local sprint_coef = 1
	speed.add_speed("freezoom_speed_run", run_coef, false, true)
	speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
	reset_fov_to_normal(fov_before)
	reset_hud_fov_to_normal(hud_fov_before)
	reset_mouse_sens_to_normal(mouse_sens_before)
end

function actor_on_weapon_zoom_out()
	if pressed == 1 then
		local run_coef = 1
		local sprint_coef = 1
		speed.add_speed("freezoom_speed_run", run_coef, false, true)
		speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
		dte.CreateTimeEvent("free_zoom_fov", "reset_fov_to_normal", 0.085, reset_fov_to_normal, fov_before)
		dte.CreateTimeEvent("free_zoom_hud_fov", "reset_hud_fov_to_normal", 0.085, reset_hud_fov_to_normal, hud_fov_before)
		dte.CreateTimeEvent("free_zoom_mouse", "reset_mouse_sens_to_normal", 0.085, reset_mouse_sens_to_normal, mouse_sens_before)
	end
	
	dte.CreateTimeEvent("free_zoom_hud_fov", "reset_hud_fov_to_normal", 0.085, reset_hud_fov_to_normal, hud_fov_before)
end

function on_game_start()
	RegisterScriptCallback("on_option_change",on_option_change)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("on_key_press",on_key_press)
	RegisterScriptCallback("on_key_release",on_key_release)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_weapon_zoom_out",actor_on_weapon_zoom_out)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	on_option_change(mcm_keybinds)
	fov_backup = get_console_cmd(2, "fov")
	hud_fov_backup = get_console_cmd(2, "hud_fov")
	mouse_sens_backup = get_console_cmd(2, "mouse_sens")           
end
