local dte = demonized_time_events
local saved_custom = {}

local target_fov = 60
local mouse_to_fov = 0.5
local hud_to_fov = 0.5

local pressed = false
local released = false
local adsing = false
local freezooming = false
local special_gun = false
local is_pistol = false
local wpn = nil
local last_sec = nil
local reload_debounce = false

local reload_ads_check = false
local reload_freezoom_check = false

-- KEYBINDINGS MANAGEMENT AND MCM --

KEY_TOGGLE_ZOOM = 341 -- Thumb mouse button

local mcm_keybinds = ui_mcm and ui_mcm.key_hold

function on_mcm_load()
	return {
		id = "free_zoom",
		sh = true,
		gr = {
			-- LuaFormatter off
			{id = "title", type = "slide", link = "ui_options_slider_player", text = "ui_mcm_menu_free_zoom", size = {512, 50}, spacing = 20},
			{id = "key_bind_toggle", type = "key_bind", val = 2, def = KEY_TOGGLE_ZOOM},
			{id = "free_zoom_mult", type = "track", val = 2, min=0.5,max=1,step=0.01, def = 0.61},
			{id = "pistol_mult", type = "track", val = 2, min=1,max=2,step=0.01, def = 1},
			{id = "ads_mult", type = "track", val = 2, min=0.5,max=1,step=0.01, def = 0.85},
			-- LuaFormatter on
		}
	}
end

function on_option_change(mcm)
	fov_before = get_console_cmd(2, "fov")
	hud_fov_before = get_console_cmd(2, "hud_fov")
	mouse_sens_before = get_console_cmd(2, "mouse_sens")
	mouse_to_fov = mouse_sens_before/fov_before
	hud_to_fov = hud_fov_before/fov_before
	if not special_gun and not is_pistol  then
		hud_fov_backup = get_console_cmd(2, "hud_fov")
	else
		if is_pistol and not special_gun then
			hud_fov_backup=hud_fov_before/pistol_mult
		end
	end
	if mcm then
		KEY_TOGGLE_ZOOM = ui_mcm.get("free_zoom/key_bind_toggle") or KEY_TOGGLE_ZOOM
		pistol_mult = ui_mcm.get("free_zoom/pistol_mult") or 1.15
		ads_mult = ui_mcm.get("free_zoom/ads_mult") or 0.85
		free_zoom_mult = ui_mcm.get("free_zoom/free_zoom_mult") or 0.61
	end
	target_fov = fov_before
end

function get_wp_sec()
	local sec = nil
	if wpn then
		sec = wpn:section()
	end
	return sec
end
function reset_fov_to_normal(fov_val)
	exec_console_cmd("fov " .. fov_val)
	return true
end

function reset_hud_fov_to_normal(fov_val)
	exec_console_cmd("hud_fov " .. fov_val)
	return true
end

function reset_mouse_sens_to_normal(fov_val)
	exec_console_cmd("mouse_sens " .. fov_val)
	return true
end
function change_zoom(fov,time)
	dte.RemoveTimeEvent("free_zoom_fov", "change_fov")
	dte.RemoveTimeEvent("free_zoom_fov", "change_mouse_sens")
	dte.RemoveTimeEvent("free_zoom_fov", "change_hud")
	if time then
		dte.CreateTimeEvent("free_zoom_fov", "change_fov", time, reset_fov_to_normal, fov)
		dte.CreateTimeEvent("free_zoom_fov", "change_mouse_sens", time, reset_mouse_sens_to_normal, fov*mouse_to_fov)
		dte.CreateTimeEvent("free_zoom_fov", "change_hud", time, reset_hud_fov_to_normal, fov*hud_to_fov)
	else
		--local new_time = 0.035 --math.abs((fov-get_console_cmd(2, "fov")))/fov_speed
		reset_fov_to_normal(fov)
		reset_mouse_sens_to_normal(fov*mouse_to_fov)
		reset_hud_fov_to_normal(fov*hud_to_fov)
		--dte.CreateTimeEvent("free_zoom_fov", "change_fov", new_time, reset_fov_to_normal, fov)
		--dte.CreateTimeEvent("free_zoom_fov", "change_mouse_sens", new_time, reset_mouse_sens_to_normal, fov*mouse_to_fov)
		--dte.CreateTimeEvent("free_zoom_fov", "change_hud", new_time, reset_hud_fov_to_normal, fov*hud_to_fov)
	end
end

special_weapons={
	["wpn_ak12_m1"] = 0.78,
	["wpn_sr25"] = 0.80,
	["wpn_adar2_15"] = 0.78,
	["wpn_pkm_siber"] = 0.78,
	["wpn_pkp_siber"] = 0.78,
	["wpn_pkm_zenit_siber"] = 0.78,
	["wpn_svu"] = 0.5,	
	["wpn_svu_alt"] = 0.5,	
	["wpn_svu_nimble"] = 0.5,	
	["wpn_val"] = 0.80,	
	["wpn_val_modern"] = 0.80,		
	["wpn_udp9"] = 0.61,
	--["wpn_pm"] = 0.3, -- test
	--["wpn_ak"] = 0.9
}

function actor_on_first_update()
	fov_before = get_console_cmd(2, "fov")
	hud_fov_before = get_console_cmd(2, "hud_fov")
	mouse_sens_before = get_console_cmd(2, "mouse_sens") 
	mouse_to_fov = mouse_sens_before/fov_before
	hud_to_fov = hud_fov_before/fov_before
  	target_fov = fov_before
	actor_on_update()
end

function actor_on_update()
    wpn = db.actor:active_item()
    local sec = get_wp_sec()
    if sec ~= last_sec then
        if sec then
            local sec_p = ini_sys:r_string_ex(sec, "parent_section") or sec
            is_pistol = SYS_GetParam(0, sec, "kind", "") == "w_pistol"
            if is_pistol then
                hud_fov_before = hud_fov_backup * pistol_mult
            else
                hud_fov_before = hud_fov_backup
            end
            if sec_p then
                if special_weapons[sec_p] then
                    special_gun = true
                    hud_fov_before = special_weapons[sec_p]
                else
                    special_gun = false
                    hud_fov_before = hud_fov_backup
                end
            end
        end
        hud_to_fov = hud_fov_before / fov_before
        adsing = false
        if freezooming then
            target_fov = fov_before * free_zoom_mult
        else
            target_fov = fov_before
        end
        change_zoom(target_fov)
        last_sec = sec
    end
    if wpn then
        if isNonAdsable() then
            if adsing and wpn:get_state() ~= 7 then
                adsing = false
                target_fov = target_fov / ads_mult
				change_zoom(target_fov)
            end
            if wpn:get_state() == 7 and not reload_debounce then
				reload_debounce = false
                target_fov = fov_before
                pressed = true
                if adsing then
                    reload_ads_check = true
                end
                if freezooming then
                    reload_freezoom_check = true
                end
				change_zoom(target_fov)
            end
        end
		if not wpn:get_state() == 7 and reload_debounce then
			reload_debounce = false
		end
    end
end


function isNonAdsable()
    if wpn then
        if wpn:get_state() == 7 or wpn:get_state() == 3 or wpn:get_state() == 1 or wpn:get_state() == 2 then
            return true
        end
    else
        return true
    end
end


function on_key_press(key)
  	local old_target_fov=target_fov
  	if item_device.is_pda_active() then return end
	if (key == bind_to_dik(key_bindings.kWPN_ZOOM)) then
		if adsing then return end
		if (get_console():get_bool("wpn_aim_toggle")) then return end
		if wpn then
			if not IsWeapon(wpn) then return end
			if IsMelee(wpn) then return end
			if IsGrenade(wpn) then return end
			if IsBolt(wpn) then return end
			if isNonAdsable() then return end
			if z_3d_scopes then
				scoped = wpn:cast_Weapon():IsScopeAttached()
				zoomed = wpn:cast_Weapon():IsZoomed()
				if scoped and zoomed then return end
			end
			target_fov=target_fov*ads_mult
			pressed = true
			adsing = true
		else
			return
		end
		--printf("adszoom")
	end
	if (key == KEY_TOGGLE_ZOOM) then
		if freezooming then return end
		if wpn then
			if wpn:get_state() == 7 then return end
			if z_3d_scopes then
				scoped = wpn:cast_Weapon():IsScopeAttached()
				zoomed = wpn:cast_Weapon():IsZoomed()
				if scoped and zoomed then return end
			end
		end
		target_fov=target_fov*free_zoom_mult
		--printf("freezoom")
		pressed = true
		freezooming = true
		local run_coef = 0.6
		local sprint_coef = 0.95
		speed.add_speed("freezoom_speed_run", run_coef, false, true)
		speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
	end
	--if (key == bind_to_dik(key_bindings.kWPN_RELOAD)) then
	--end
	if (get_console_cmd(2, "fov")~=target_fov or target_fov~=old_target_fov) and pressed then
		--printf("Zoomout, "..tostring(target_fov)..", "..tostring(old_target_fov))
		pressed = false
		change_zoom(target_fov)
	end
end

function on_key_release(key)
  	local old_target_fov=target_fov
	if item_device.is_pda_active() then return end
	if (key == bind_to_dik(key_bindings.kWPN_ZOOM)) then
		if not adsing then return end
		if wpn then
			if reload_ads_check then
				reload_ads_check = false
				adsing = false
				return
			end
			if isNonAdsable() then return end
			if not IsWeapon(wpn) then return end
			if IsMelee(wpn) then return end
			if IsGrenade(wpn) then return end
			if IsBolt(wpn) then return end
			if (get_console():get_bool("wpn_aim_toggle")) then return end
			adsing = false
			target_fov=target_fov/ads_mult
			released = true
		else
			return
		end
	end
	if (key == KEY_TOGGLE_ZOOM) then
		if not freezooming then return end
		if reload_freezoom_check then
			reload_freezoom_check = false
			freezooming = false
			local run_coef = 1
			local sprint_coef = 1
			speed.add_speed("freezoom_speed_run", run_coef, false, true)
			speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
			return
	   	end
		if wpn then
			if wpn:get_state() == 7 then return end
			if z_3d_scopes then
				scoped = wpn:cast_Weapon():IsScopeAttached()
				zoomed = wpn:cast_Weapon():IsZoomed()
				if scoped and zoomed then return end
			end
		end
		freezooming = false
		target_fov=target_fov/free_zoom_mult
		released = true
		local run_coef = 1
		local sprint_coef = 1
		speed.add_speed("freezoom_speed_run", run_coef, false, true)
		speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
	end
	if (get_console_cmd(2, "fov")~=target_fov or target_fov~=old_target_fov) and released then
		--printf("Zoomout, "..tostring(target_fov)..", "..tostring(old_target_fov))
		released = false
		change_zoom(target_fov)
	end
end

function actor_on_weapon_zoom_out()
	if wpn and z_3d_scopes then
		if wpn:get_state() == 7 then return end
		local scoped = wpn:cast_Weapon():IsScopeAttached()
		local zoomed = wpn:cast_Weapon():IsZoomed()
		if freezooming and scoped then
			local run_coef = 0.6
			local sprint_coef = 0.95
			speed.add_speed("freezoom_speed_run", run_coef, false, true)
			speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
			target_fov = fov_before*free_zoom_mult
			change_zoom(target_fov)
		end
	end
end

function actor_on_before_death()
	local run_coef = 1
	local sprint_coef = 1
	speed.add_speed("freezoom_speed_run", run_coef, false, true)
	speed.add_speed("freezoom_speed_sprint", sprint_coef, true, true)
	reset_fov_to_normal(fov_before)
	reset_hud_fov_to_normal(hud_fov_backup)
	reset_mouse_sens_to_normal(mouse_sens_before)
end

function on_game_start()
	RegisterScriptCallback("on_option_change",on_option_change)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("on_key_press",on_key_press)
	RegisterScriptCallback("on_key_release",on_key_release)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_weapon_zoom_out",actor_on_weapon_zoom_out)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("load_state", load_state)
	on_option_change(mcm_keybinds)
	hud_fov_backup = get_console_cmd(2, "hud_fov")
end